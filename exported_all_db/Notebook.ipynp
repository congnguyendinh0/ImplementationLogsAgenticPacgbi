{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analysis of Agents Data\n",
    "\n",
    "This notebook analyzes the agents.csv file which contains information about chat managers and their configurations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import json\n",
    "from datetime import datetime\n",
    "\n",
    "# Set style for better visualizations\n",
    "plt.style.use('seaborn')\n",
    "sns.set_palette(\"husl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Read the CSV file\n",
    "df = pd.read_csv('exported_all_db/agents.csv')\n",
    "\n",
    "# Display basic information about the dataset\n",
    "print(\"Dataset Info:\")\n",
    "print(df.info())\n",
    "print(\"\\nFirst few rows:\")\n",
    "display(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basic Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Convert timestamp to datetime\n",
    "df['timestamp'] = pd.to_datetime(df['timestamp'])\n",
    "\n",
    "# Basic statistics\n",
    "print(\"Number of unique sessions:\", df['session_id'].nunique())\n",
    "print(\"Number of unique agents:\", df['agent_id'].nunique())\n",
    "print(\"\\nTime range:\")\n",
    "print(f\"From: {df['timestamp'].min()}\")\n",
    "print(f\"To: {df['timestamp'].max()}\")\n",
    "print(f\"Duration: {df['timestamp'].max() - df['timestamp'].min()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Agent Types Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Count of different agent classes\n",
    "class_counts = df['class'].value_counts()\n",
    "\n",
    "# Create a pie chart\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.pie(class_counts, labels=class_counts.index, autopct='%1.1f%%')\n",
    "plt.title('Distribution of Agent Classes')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Configuration Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Parse the init_args JSON string\n",
    "df['init_args'] = df['init_args'].apply(json.loads)\n",
    "\n",
    "# Extract common configuration parameters\n",
    "configs = []\n",
    "for args in df['init_args']:\n",
    "    if 'groupchat' in args:\n",
    "        configs.append({\n",
    "            'max_round': args['groupchat']['max_round'],\n",
    "            'admin_name': args['groupchat']['admin_name'],\n",
    "            'func_call_filter': args['groupchat']['func_call_filter'],\n",
    "            'enable_clear_history': args['groupchat']['enable_clear_history'],\n",
    "            'send_introductions': args['groupchat']['send_introductions']\n",
    "        })\n",
    "\n",
    "config_df = pd.DataFrame(configs)\n",
    "print(\"Configuration Statistics:\")\n",
    "display(config_df.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Temporal Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Create a time series plot of agent creation\n",
    "plt.figure(figsize=(12, 6))\n",
    "df['timestamp'].value_counts().sort_index().plot(kind='line')\n",
    "plt.title('Agent Creation Over Time')\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('Number of Agents Created')\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Agent Relationships Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Analyze the number of agents in each groupchat\n",
    "agent_counts = []\n",
    "for args in df['init_args']:\n",
    "    if 'groupchat' in args and 'agents' in args['groupchat']:\n",
    "        agent_counts.append(len(args['groupchat']['agents']))\n",
    "\n",
    "print(\"Agent Count Statistics:\")\n",
    "print(f\"Average number of agents per groupchat: {sum(agent_counts)/len(agent_counts):.2f}\")\n",
    "print(f\"Maximum number of agents in a groupchat: {max(agent_counts)}\")\n",
    "print(f\"Minimum number of agents in a groupchat: {min(agent_counts)}\")\n",
    "\n",
    "# Create a histogram of agent counts\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(agent_counts, bins=range(min(agent_counts), max(agent_counts) + 2))\n",
    "plt.title('Distribution of Number of Agents per Groupchat')\n",
    "plt.xlabel('Number of Agents')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
